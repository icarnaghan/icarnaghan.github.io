<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Drupal on Ian Carnaghan</title>
    <link>http://localhost:1313/tags/drupal/</link>
    <description>Recent content in Drupal on Ian Carnaghan</description>
    <image>
      <title>Ian Carnaghan</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 31 Mar 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/drupal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Infrastructure Options for Hosting Multiple Drupal Sites</title>
      <link>http://localhost:1313/infrastructure-options-for-hosting-multiple-drupal-sites/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/infrastructure-options-for-hosting-multiple-drupal-sites/</guid>
      <description>&lt;p&gt;A project I was recently working on had in place a cloud-based infrastructure that was designed to support a single installation of the Drupal CMS running in Amazon Web Services (AWS). This infrastructure included an auto-scaling setup with load balancers hosting a &amp;lsquo;cache&amp;rsquo; layer and an &amp;lsquo;application&amp;rsquo; layer that hosted the Drupal CMS. On the backend tier, an AWS Relational Database Service (RDS) provided the MySQL database needed for the application. There were other components of the infrastructure such as our shared services for continuous integration, monitoring and development tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lessons Learned using Drupal’s Domain Access Module</title>
      <link>http://localhost:1313/lessons-learned-using-drupals-domain-access-module/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/lessons-learned-using-drupals-domain-access-module/</guid>
      <description>&lt;p&gt;Over the last few months my team has been developing microsites to accompany our main website. The requirements for these sites included having their own domain, theme and separate content. After reviewing options in Drupal 7, I decided the best approach given our situation was to use the Domain Access Module. The Domain Access Module provides a very solid and powerful framework for developing additional sites within your existing Drupal CMS, but it can also be somewhat complicated to setup for any given use case. I have documented some of the lessons learned over the last few months as we implemented Domain Access in our own project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Preparing for the Acquia Certified Developer Exam Drupal 8</title>
      <link>http://localhost:1313/preparing-for-the-acquia-certified-developer-exam-drupal-8/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/preparing-for-the-acquia-certified-developer-exam-drupal-8/</guid>
      <description>&lt;p&gt;The Acquia Certified Developer exam Drupal 8 just launched a couple of months ago. I was interested in studying for this exam as I have been working in Drupal 8 for the last six months and future projects look most likely to be Drupal 8 based. I had looked at the various Acquia certification tracks in the past, however I was never fully committed to the Drupal 7 track so I was happy when Acquia announced first the Foundations and then later the Certified Developer exams. I took the Foundations exam first and found that while I was weaker in my front-end Drupal 8 skills, I managed to pass. Later when I sat for the Certified Developer exam I realized there was a bit of cross over in terms of the questions, in fact I think a few of them were taken directly from the foundations exam. I would recommend anyone considering the Certified Developer exam to first take Foundations as it will give you a good idea of the type of questions to expect.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection Service Container Example</title>
      <link>http://localhost:1313/dependency-injection-service-container-example/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/dependency-injection-service-container-example/</guid>
      <description>&lt;p&gt;In an earlier post, I outlined the basics of dependency injection and talked a little bit about the Drupal 8 service container and how we can use this in our code. Day 16 of Drupal Activity Cards provides a task for us to implement dependency injection in one of the Drupal 8 Example modules.&lt;/p&gt;
&lt;p&gt;The examples module is a great resource for developers getting started in Drupal coding. The modules included gives us basic functionality that provides easy to follow starting points for a number of different needs. For our dependency injection example we are going to look at page_example, a simple module for generating a Drupal 8 page via a controller. A function called simple() returns a basic page. We are going to extend this function to provide a log entry every time a use visits this page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Logging in Drupal 8</title>
      <link>http://localhost:1313/logging-in-drupal-8/</link>
      <pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/logging-in-drupal-8/</guid>
      <description>&lt;p&gt;Logging is very important in any production site because we don&amp;rsquo;t have the same ability to debug code that we have in our development environments. Drupal 7 had a very robust logging system called watchdog(), which has been replaced by logger in Drupal 8. This post summarizes a basic use case for logging in Drupal 8 continuing the Drupal 8 Activity Cards series on Day 13.&lt;/p&gt;
&lt;p&gt;Amber Matz breaks down logging in Drupal 8 concisely in How to Log Messages in Drupal 8. In her article, she breaks down the code needed to implement logger and provides solid explanations. The examples provided involve procedural coding in the .module file as does the example I provide in this article. If you are writing controllers or forms that extend ControllerBase or FormBase then it would be better to use the service container to inject logger into your code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Drupal 8 Theming</title>
      <link>http://localhost:1313/introduction-to-drupal-8-theming/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/introduction-to-drupal-8-theming/</guid>
      <description>&lt;p&gt;Drupal 8 has a new theme engine, however many of the concepts we are familiar with in Drupal 7 are still in place in this new version. Themes still have the same ability to overwrite various templates within core, only now instead of modifying .tpl.php files, you will be creating Twig files in their place. Theme functions are still available to use, however they are now kept in the .theme file instead of template.php. Other changes worthy of exploring in more depth are briefly summarized below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a Custom Content Entity Type</title>
      <link>http://localhost:1313/creating-a-custom-content-entity-type/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/creating-a-custom-content-entity-type/</guid>
      <description>&lt;p&gt;Drupal 8 has seen a lot of improvements for content entities and with the new Drupal console, setting up a content entity has been made a lot easier with the addition of boilerplate code generation. Day 11 of the Drupal 8 Activity Card set focuses on content entities, how they can be setup in Drupal 8, how we might add our own custom fields to the boilerplate code provided, and how this is managed within the Drupal 8 administration system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring your Local Drupal 8 Development Environment</title>
      <link>http://localhost:1313/configuring-your-local-drupal-8-development-environment/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configuring-your-local-drupal-8-development-environment/</guid>
      <description>&lt;p&gt;I have struggled with properly optimizing my local environment in terms of enabling debugging and disabling cache for a while. There isn&amp;rsquo;t that many steps you need to cover in order to have a proper working development environment. After reviewing Day 10 I completed setting up my environment the correct way and have outlined this in the following sections.&lt;/p&gt;
&lt;h2 id=&#34;step-1-enable-settingslocalphp&#34;&gt;Step 1 Enable settings.local.php&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Copy and Rename /sites/settings.example.local.php -&amp;gt; /sites/default/settings.local.php&lt;/li&gt;
&lt;li&gt;Uncomment the following lines in your settings.php file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# if (file_exists(__DIR__ . &amp;#39;/settings.local.php&amp;#39;)) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   include __DIR__ . &amp;#39;/settings.local.php&amp;#39;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-disable-cache-services&#34;&gt;Step 2 Disable Cache Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In your sites/default/settings.local.php file, uncomment the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# $settings[&amp;#39;cache&amp;#39;][&amp;#39;bins&amp;#39;][&amp;#39;render&amp;#39;] = &amp;#39;cache.backend.null&amp;#39;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Rebuild your site configuration by visiting yoursite.local/rebuild.php&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-disabletwig-cache-and-enable-debugging&#34;&gt;Step 3 Disable Twig Cache and Enable Debugging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add the following lines to your /sites/development-services.yml (Refer to /sites/default/default-services.yml for all options)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;twig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;auto_reload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Clear Cache and then verify Twig debugging has been enabled by refreshing your Drupal 8 homepage. Review your source code and you should see something similar to:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HOOK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SUGGESTIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;twig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;twig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;twig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Twig debugging gives a lot of helpful information scattered throughout your source code in the form of comments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Attaching JS and CSS Assets in Drupal 8</title>
      <link>http://localhost:1313/attaching-js-and-css-assets-in-drupal-8/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/attaching-js-and-css-assets-in-drupal-8/</guid>
      <description>&lt;p&gt;Drupal 8 has introduced a different way of attaching JavaScript and CSS to themes and custom modules via a new concept called libraries, which are covered in Day 9. Libraries are essentially .yml files that define different groups of assets that can later be attached via module code. When I started working with the theme layer in Drupal 8, I quickly realized that certain things are very different from Drupal 7. One of the main gotchas for anyone new to Drupal 8 is the idea that JavaScript libraries are now only loaded where they are needed. In contrast to Drupal 7 where jQuery for example, was loaded on every page, in Drupal 8 jQuery is no longer automatically loaded. This provides for a better optimized site with only the required libraries included in areas that they are needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Drupal 8 Plugin System</title>
      <link>http://localhost:1313/drupal-8-plugin-system/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/drupal-8-plugin-system/</guid>
      <description>&lt;p&gt;There is a lot of new terminology in Drupal 8 and for anyone not familiar with Object Oriented programming, some of it can be downright confusing. For myself, I have worked with OOP for quite a while, however I have not spent as much time writing custom modules for Drupal 7. While I am familiar on the surface with the hook system and API at a very novice level, I have never really had to do any intense back end development in D7. Now that I am working in Drupal 8, things are quite different with my projects at work. Thankfully my OOP background has filled in some of the gaps, however my lack of Drupal 7 module development knowledge has proven to be a burden.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cron Queuing in Drupal 8</title>
      <link>http://localhost:1313/cron-queuing-in-drupal-8/</link>
      <pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/cron-queuing-in-drupal-8/</guid>
      <description>&lt;p&gt;Day 7 focuses mainly on the Drupal Queue API. The main resource for this card is an article called Drupal 8 Queue API – Powerful Manual and Cron Queueing, which I had referenced in an earlier post. Before completing any of the materials, I had no previous experience with the Queue API, nor hook_entity_insert, which was used to create a demo queue system in the referenced article. After going through the article I gained a better understanding of how the queue system works. At a high level the following steps outline the process of constructing the module that is documented in this article along with relevant links to the API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Services and Dependency Injection</title>
      <link>http://localhost:1313/services-and-dependency-injection/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/services-and-dependency-injection/</guid>
      <description>&lt;p&gt;For several years I have worked as an ASP.NET MVC developer and have become intimately familiar with terms such as services and dependency injection and services. It is refreshing to see some of these familiar concepts surfacing in Drupal 8. Day 6 focuses mainly on introducing us to services and dependency injection via several online resources. There is no exercises or tasks in this card as the aim is to simply gain an understanding of some of these concepts. I saw a lot of overlap in terms of syntax and how dependency injection is handled in Drupal 8 compared with Unity and StuctureMap in ASP.NET, so anyone from background or other traditional object oriented languages such as Java will be familiar with a lot of this. I have outlined the main takeaways I got from the Day 6 below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Drupal 8 Migration</title>
      <link>http://localhost:1313/drupal-8-migration/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/drupal-8-migration/</guid>
      <description>&lt;p&gt;I have had some exposure to the migrate module in the past, mostly with Drupal 7 and more recently for a Drupal 8 migration project that required importing of a small (under 1000) set of records stored in a CSV file. Todays D8Card focuses on the new migration module that comes partly with core and also partly in the form of contributed modules.&lt;/p&gt;
&lt;h2 id=&#34;migrate-core--migrate-contrib&#34;&gt;Migrate Core &amp;amp; Migrate Contrib&lt;/h2&gt;
&lt;p&gt;The purpose of todays set of tasks was to import a couple of small CSV files using migrate and some of the contributed modules. I started out by reviewing the links posted in the card and then proceeded to download and install migrate_tools, migrate_plus, and migrate_source_csv. What comes with Drupal 8 core out of the box is pretty limited and only contains migration functionality for moving content from previous Drupal sites. It definitely makes the upgrade process less painful, however if you want to get into migration code that can manage a multitude of external sources, then you will want to grab to contrib modules above.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The New Block System in Drupal 8</title>
      <link>http://localhost:1313/the-new-block-system-in-drupal-8/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/the-new-block-system-in-drupal-8/</guid>
      <description>&lt;p&gt;Among the many changes in Drupal 8, the blocks system received an overhaul, which has improved much of its functionality significantly. Some of the most notable take aways include the new block page layout and UI for updating, adding, and editing blocks, the addition of custom blocks and fieldable types (similar to content types), and integration with display view modes to allow for rendering changes based on block placement. Day 5 directs you to a good introductory video of the new blocks system by the Drupalize.me team.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Configuration Forms</title>
      <link>http://localhost:1313/building-configuration-forms/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/building-configuration-forms/</guid>
      <description>&lt;p&gt;In Day 3 we are starting to accelerate in terms of skills developed by the cards. This card has us create our first Drupal 8 module, learn about Drupal 8 Form API and learn about the Configuration API. The card starts off with directing you to several Drupal.org documentation pages including Creating a Custom Page,  Defining and using your own configuration in Drupal 8, Providing Default configuration, and Simple Configuration API. Except for the Creating a Custom Page document, everything else here is focused on giving you a solid overview of the configuration system within Drupal 8.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Paragraphs Module</title>
      <link>http://localhost:1313/paragraphs-module/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/paragraphs-module/</guid>
      <description>&lt;p&gt;I have to be honest, before completing Day 2 tasks, I had never actually used the Paragraphs module before. I heard others mention it in the past and considered looking at it at some point, however until today I did not realize what I was missing in terms of the power and flexibility that this module has to offer. The d8cards.com Paragraphs Module card begins with directing you to YouTube tutorial by Zane Sensenig, embedded below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Drupal 8 Configuration Management</title>
      <link>http://localhost:1313/drupal-8-configuration-management/</link>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/drupal-8-configuration-management/</guid>
      <description>&lt;h2 id=&#34;the-21-day-challenge&#34;&gt;THE 21 DAY CHALLENGE&lt;/h2&gt;
&lt;p&gt;I’ve been trying to learn Drupal 8 for the last couple of months as I was landed in the middle of a D8 project at work. Being involved on the project has taught me a lot about Drupal 8 module development and Symfony in general, however I have started questioning the way I am writing code and if in fact it is the best way or the ‘Drupal’ way. I decided I needed some additional exposure to Drupal 8, not only in terms of module development, but as a platform in its entirety including front-end, configuration as well as back-end.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xdebug &#43; Scotchbox Vagrant &#43; PHPStorm in Three Steps</title>
      <link>http://localhost:1313/xdebug--scotchbox-vagrant--phpstorm-in-three-steps/</link>
      <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/xdebug--scotchbox-vagrant--phpstorm-in-three-steps/</guid>
      <description>&lt;p&gt;I come from a .NET background where I was spoiled by the ease of use and integration of Visual Studio. Recently much of my development work has moved to the open source and the world of Drupal 8 where I have gotten by until recently with Sublime Text and Atom. Since I have started writing custom modules, I needed a way to effectively debug my code and I had heard good things about the PHP debugger Xdebug. Unfortunately it can be a little tricky to setup, so I have outlined the basic steps I needed to go through using my favorite Vagrant environment Scotchbox. If you are unfamiliar with Scotchbox, check out my earlier posts Scotchbox Vagrant LAMP Stack and Drupal Development Environment in less than 10 Minutes&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using PostGreSQL with Scotchbox Vagrant LAMP Stack</title>
      <link>http://localhost:1313/using-postgresql-with-scotchbox-vagrant-lamp-stack/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/using-postgresql-with-scotchbox-vagrant-lamp-stack/</guid>
      <description>&lt;p&gt;I have been using Scotchbox for a while now and continue to be impressed by it&amp;rsquo;s simplicity and ease of use compared to other Vagrant environments I have used in the past. Recently I started working on a Drupal 8 project that required the use of a PostGreSQL (PostGres) database. Thankfully, when I checked the Scotchbox 2.0 documentation, it appeared that PostGres came packaged up with the environment and ready to use. After doing a little bit of research I realized I needed to follow a couple of steps in order to get this running properly with a PostGres client. I am outlining the steps below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Drupal Development Environment</title>
      <link>http://localhost:1313/drupal-development-environment/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/drupal-development-environment/</guid>
      <description>&lt;p&gt;Drupal can be installed on any number of environments, but since it was developed primarily to run on an Apache server with PHP and MySQL database, it makes sense to mimic this environment as much as possible in a development sandbox. There are LAMP applications for both Windows (WAMP / XAMP) and Mac OS (MAMP) which can serve as a Linux replacement, however recent innovations with Virtual Machines and Vagrant means that we can re-create a more native environment for development quickly and easily. Below I will describe how you can setup Drupal using some of these tools in less than 10 minutes. The Vagrant setup used here is Scotch Box. The objective is to setup a Drupal development environment with full LAMP stack capabilities including command line access and Drush integration using the native Linux file system for speed and compatibility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rockville Drupal Meetup</title>
      <link>http://localhost:1313/rockville-drupal-meetup/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rockville-drupal-meetup/</guid>
      <description>&lt;p&gt;Are you a Drupal developer or someone who is interested in learning or hearing more about the platform?  Each month there are various &amp;lsquo;meet-ups&amp;rsquo; that take place across the area.  ICF International now co-sponsors two of these meet-ups, one is held in our Fairfax office and the other in Rockville.  Last night we held our first Rockville meet-up, which was a big success. &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
