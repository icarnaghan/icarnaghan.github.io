<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Csec-640 on Ian Carnaghan</title>
    <link>https://www.carnaghan.com/tags/csec-640/</link>
    <description>Recent content in Csec-640 on Ian Carnaghan</description>
    <image>
      <title>Ian Carnaghan</title>
      <url>https://www.carnaghan.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.carnaghan.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.carnaghan.com/tags/csec-640/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DNS Rebinding and Intrusion Detection with Contextual Signatures</title>
      <link>https://www.carnaghan.com/dns-rebinding-and-intrusion-detection-with-contextual-signatures/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/dns-rebinding-and-intrusion-detection-with-contextual-signatures/</guid>
      <description>&lt;p&gt;This article summarizes and analyzes discussion from two different articles on the subjects of DNS Rebinding and the use of contextual signatures with Intrusion Detection Systems.&lt;/p&gt;
&lt;p&gt;DNS Rebinding is type of attack that was first documented in the mid 1990s. Since then it has become more prevalent through vulnerabilities inherent the way information is transmitted to and from a typical web browser using JavaScript. This topic is covered in depth along with the various methods of DNS rebinding, vulnerabilities and mitigations efforts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mitigating DoS or Distributed DoS (DDoS) attacks</title>
      <link>https://www.carnaghan.com/mitigating-dos-or-distributed-dos-ddos-attacks/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/mitigating-dos-or-distributed-dos-ddos-attacks/</guid>
      <description>&lt;p&gt;Denial of Service (Dos) and Distributed Denial of Service (DDoS) attacks have continued to prove to be one of the most challenging threats in modern times. While DoS has been around for some time, the methods used and practices of distributed botnets and automated scripts have continued to grow in sophistication. This paper survey’s three peer reviewed papers in the areas of Denial of Service Detection, Prevention and Mitigation. Each of these sections provide a rationale for the publication selected along with an overview of the proposed techniques and / or application solutions. Each section concludes by highlighting some benefits and drawbacks for each proposed technique. Additional supporting research has been carried out contribute to this overall paper as outlined in the references section at the end.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common Bluetooth Vulnerabilities to be Aware of</title>
      <link>https://www.carnaghan.com/common-bluetooth-vulnerabilities-to-be-aware-of/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/common-bluetooth-vulnerabilities-to-be-aware-of/</guid>
      <description>&lt;p&gt;Bluetooth connectivity has grown immensely in popularity with mobile devices in the last number of years. The convenience factor of being able to have a hands-free experience with a mobile phone while driving or out and about has fueled this growth. Unfortunately, like all conveniences there are typically downsides. In the case of Bluetooth, there have been a number of  vulnerabilities detected over the last number of years ranging from mobile device viruses to attacks on devices from attackers.  In their 2006 publication, Bose &amp;amp; Shin discussed the negative impact of viruses specifically designed to target Bluetooth enabled mobile devices. Their paper discussed the pitfalls of these types of malware that could be spread via SMS/MMS messages and by exploiting Bluetooth vulnerabilities. They analyzed these viruses in order build detection and containment systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mobile Considerations in Network Security Architecture</title>
      <link>https://www.carnaghan.com/mobile-considerations-in-network-security-architecture/</link>
      <pubDate>Sat, 19 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/mobile-considerations-in-network-security-architecture/</guid>
      <description>&lt;p&gt;The use of mobile devices including policies and employee restrictions should be considered in any modern network security architecture. Mobile devices are used commonly both at home and at work with some organizations managing BYOD (Bring your Own Device) policies. It is therefore important to consider the implications of this and to ensure any BYOD device is properly locked down, authorized and managed within the corporate network. Westervelt (2010) published an article several years ago on the high amount of vulnerabilities discovered within mobile devices. Many of which were reminiscent of earlier / legacy web application issues. Homeland Security Newswire published an article on the ‘new’ cybersecurity threat of smartphone apps that do more than they say they do in terms of hidden malware and other threats. n.d. (2010).&lt;/p&gt;</description>
    </item>
    <item>
      <title>What are Covert Channels?</title>
      <link>https://www.carnaghan.com/what-are-covert-channels/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/what-are-covert-channels/</guid>
      <description>&lt;p&gt;A covert storage channel occurs when illegitimate hidden information or data is sent secretly via a legitimate communication channel. The process occurs through the manipulation of communications medium in an unconventional way in order to transmit data that is unseen in everyday operations. Thyer (2008). An example of a covert storage channel involves the hiding of data in ICMP error echoing functionality. OWASP (n.d.). Due to the specification, data can be sent to cause a host to leek information or provide verbose error messages potentially revealing sensitive operating system information. This type of covert channel could lead to gaining knowledge of vulnerabilities and possible future attacks. It can be mitigated by clearing out all reserved fields prior to transmission to ensure no sensitive data is leaked.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modern Application Frameworks, Legacy Browsers and Security Implications</title>
      <link>https://www.carnaghan.com/modern-application-frameworks-legacy-browsers-and-security-implications/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/modern-application-frameworks-legacy-browsers-and-security-implications/</guid>
      <description>&lt;p&gt;I was recently sent an article titled ‘How it feels to learn JavaScript in 2016’. Aguinaga, J. (2016).  It is a somewhat amusing take on the current state of JavaScript frameworks and libraries available to web developers and how this environment is changing so quickly. All quirks aside, modern application frameworks provide us with much interactivity and web functionality we take for granted. The modern web browser has to cope with these advancements and continue to evolve to meet the demands of its users and developers. In the Federal government and other organizations that are not able to update their software systems to keep up with the pace, libraries called polyfills have been created to add functionality to legacy browsers that were never designed to run such rich modern web applications. Modernizr is one of the most popular HTML5 polyfills available as open source software at &lt;a href=&#34;https://github.com/Modernizr&#34;&gt;https://github.com/Modernizr&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Common Router Security Threats</title>
      <link>https://www.carnaghan.com/two-common-router-security-threats/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/two-common-router-security-threats/</guid>
      <description>&lt;p&gt;&lt;em&gt;Syn Flood or Denial of Service Attack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Syn Flood attacks, often referred to as Denial of Service Attacks are caused through exploitation of the TCP protocol. The attacker sends a large number of TCP/SYN packets using a forged address. Because of this, the destination server is unable to successfully establish a proper connection due to the source being unreachable. Lawrence (n.d.). Each time the server attempts to establish a connection, resources are used up with the flooding of packets causing eventual slow down or non-responsiveness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What are Rogue Access Points?</title>
      <link>https://www.carnaghan.com/what-are-rogue-access-points/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/what-are-rogue-access-points/</guid>
      <description>&lt;p&gt;WiFi is commonly used both within organizations and in the general public. In recent years attackers have discovered ways to lure victims by using rogue access points. These are essentially wireless access points that have been installed in a network without authorization. In some cases these may have been installed by employees of an organization for convenience reasons, however this in itself is a security risk. More often than not, an employee who has installed such a device would most likely not have secured it correctly potentially leaving the network open to attack. On the other hand attackers deliberately install a rogue access points in order to deliberately target the network. This can be done through a series of vulnerability testing or scanning once they have access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Wireshark on Mac OS X (Yosemite)</title>
      <link>https://www.carnaghan.com/installing-wireshark-on-mac-os-x-yosemite/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/installing-wireshark-on-mac-os-x-yosemite/</guid>
      <description>&lt;p&gt;Wireshark is a software application for protocol and network traffic analysis, also known as a network sniffer. The application can be downloaded for free at https://www.wireshark.org/#download. I downloaded Wireshark from the url and selected the macOS 10.6 .dmg file. I was able to successfully mount the download image and run the package installer which kept all the default settings with the following installed in my system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/Applications/Wireshark.app&lt;/em&gt;. The main Wireshark application.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/Library/LaunchDaemons/org.wireshark.ChmodBPF.plist&lt;/em&gt;. A launch daemon that adjusts permissions on the system&amp;rsquo;s packet capture devices (&lt;em&gt;/dev/bpf&lt;/em&gt;*) when the system starts up.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/Library/Application Support/Wireshark/ChmodBPF&lt;/em&gt; A copy of the launch daemon property list, and the script that the launch daemon runs.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/usr/local/bin&lt;/em&gt;. A wrapper script and symbolic links which will let you run Wireshark and its associated utilities from the command line. You can access them directly or by adding /usr/local/bin to your PATH if it&amp;rsquo;s not already in your PATH.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Source: Wireshark Read Me First.rtf)&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP Congestion Control</title>
      <link>https://www.carnaghan.com/tcp-congestion-control/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://www.carnaghan.com/tcp-congestion-control/</guid>
      <description>&lt;p&gt;So it&amp;rsquo;s that time of year again where I decided to enroll in another Cybersecurity class at UMUC. I will be posting snippets from the class over the next few weeks. This week TCP Congestion Control was one of the topics I was looking at and so this post will serve as a high level overview.&lt;/p&gt;
&lt;p&gt;TCP Congestion Control is the process of monitoring and controlling network traffic in order to avoid congestion, which could lead to potential loss of packets and / or poor transmission rates. It determines the available capacity on the network and in turn is equipped with the information needed to know the number of packets that can be safely transmitted. Congestion control maintain a state variable for each connection called a congestion window, which is used to determine limits on the amount of data that can be sent at any given time. The size of the limits defined in this window change accordingly based on congestion levels via the process of the additive increase/multiplicative decrease (AIMD) algorithm. AIMD essentially lowers the limits of the congestion window when there is less congestion and raises them when congestion levels have increased.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
